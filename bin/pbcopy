#!/usr/bin/env bash
# vim: set tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent copyindent :

bname="$(basename "$0")"
if [[ $1 == copy ]] || [[ $1 == paste ]]
then
  bname="$1"
  shift
else
  bname="${bname#pb}"
fi

die ()
{
  local f
  for f in "$@"
  do
    printf '%s' "$f" 1>&2
    echo
  done
  exit 1
}

do_darwin ()
{
  local mode=pb"$1" ; shift
  local exe=()
  read -r -d'\n' -a exe < <(type -apf "$mode" )
  local EXE="${exe[-1]}"
  exec "$EXE" "$@"
}

do_wayland ()
{
  local mode="$1" ; shift
  case "$mode" in
    (copy)
      if type -f wl-copy >/dev/null 2>&1
      then
        exec wl-copy "$@"
      fi
      ;;
    (paste)
      if type -f wl-paste >/dev/null 2>&1
      then
        exec wl-paste "$@"
      fi
      ;;
    (*) die "unknown mode '$mode' for wayland" ;;
  esac
}

do_x11 ()
{
  local mode="$1" ; shift
  case "$mode" in
    (copy)
      if type -f xsel >/dev/null 2>&1
      then
        exec xsel --clipboard --input "$@"
      elif type -f xclip >/dev/null 2>&1
      then
        exec xclip -selection clipboard "$@"
      fi
      ;;
    (paste)
      if type -f xclip >/dev/null 2>&1
      then
        exec xclip -selection clipboard -o "$@"
      elif type -f xsel >/dev/null 2>&1
      then
        exec xsel --clipboard --output "$@"
      fi
      ;;
    (*) die "unknown mode '$mode' for x11" ;;
  esac
}

do_ms ()
{
  local mode="$1" ; shift
  case "$mode" in
    (copy)
      exec clip.exe "$@"
      ;;
    (paste)
      exec powershell.exe -command "Get-Clipboard" "$@"
      ;;
    (*) die "unknown mode '$mode' for ms" ;;
  esac
}


if [[ $1 == --x2w ]]
then
  "$0" paste --x11 | "$0" copy --wayland
  exit
elif [[ $1 == --w2x ]]
then
  "$0" paste --wayland | "$0" copy --x11
  exit
elif [[ $1 == --x11 ]]
then
  shift
  do_x11 "$bname" "$@"
elif [[ $1 == --wayland ]]
then
  shift
  do_wayland "$bname" "$@"
elif [[ $1 == --ms ]]
then
  shift
  do_ms "$bname" "$@"
fi

# the wayland way
if [ -n "$WAYLAND_DISPLAY" ]
then
  do_wayland "$bname" "$@"
fi

# the x11 way
if [ -n "$DISPLAY" ]
then
  do_x11 "$bname" "$@"
fi

# freedesktop.org way
# https://specifications.freedesktop.org/basedir-spec/latest/ar01s03.html
case "$XDG_SESSION_TYPE" in
  (x11)
    do_x11 "$bname" "$@"
    ;;
  (wayland)
    do_wayland "$bname" "$@"
    ;;
esac


# the systemd way
if type -f loginctl >/dev/null 2>&1
then
  t="$( loginctl show-session $(loginctl | grep " $(id -un) " | awk '{print $1}') -p Type )"
  case "$t" in
  (Type=x11)
    do_x11 "$bname" "$@"
    ;;
  (Type=wayland)
    do_wayland "$bname" "$@"
    ;;
  esac
fi


case "$OSTYPE" in
(darwin*) # Mac OSX
  # We don't check for macos first, because there are x11 servers for macos.
  # If x11 or wayland are detected but fail, this will block will still run.
  do_darwin "$bname" "$@"
  ;;
(linux-gnu*)
  if ! grep -q Microsoft /proc/version
  then
    # For WSL if x11 or wayland isn't running.
    # WSL transparently handles clipboard sharing with x11! and presumably wayland.
    do_ms "$bname" "$@"
  fi
  ;;
(cygwin*|msys*|win32*)
  # cygwin: POSIX compatibility layer and Linux environment emulation for Windows
  # msys: Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
  # win32: I'm not sure this can happen.
  # This might be caught as x11 or wayland before things get this far.
  do_ms "$bname" "$@"
  ;;
esac


die "ERROR: unsupported configuration.  Please fix this wrapper script."
