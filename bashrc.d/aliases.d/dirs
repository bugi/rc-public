#!bash
# vim:set ft=sh tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent copyindent :



#----------- DIRS -----------

unalias D 2>/dev/null
function D ()
{
  echo # to visually separate from prompt, which likely also includes the current path
  dirs -v
  echo # to visually separate from prompt, which likely also includes the current path
  #
  # Alternately, could define in terms of DIRS, a shell+perl script that
  # factors out common strings to reduce display complexity.  Left as an
  # exercise for the future.  The current DIRS.pl needs work, and should
  # be implemented as a native bash function anyway.
}

function d_git ()
{ # format input in git-aware form
  # returns false if it disclaims as in a git directory
  # returns true and a string in git-aware form otherwise
  local f="$1" ; shift # expects full path, without "~" for $HOME
  local g R
  local orig="$f"

  if [ "$f" = "$HOME" ]
  then
    # ignore user's home directory
    false
    return
  fi

  g="$( cd "$f" && git rev-parse --is-inside-work-tree 2>/dev/null )"
  R=$?
  if [ $R -ne 0 ] || [ "$g" != true ]
  then # is not a git path
    false
    return
  fi

  local gitroot="$( cd "$f" && git rev-parse --show-toplevel 2>/dev/null )"
  if [ "$gitroot" = "$f" ]
  then
    # is at root of a git checkout
    # special case
    # return formatted as repo name and position within repo
    f=.
    printf "%s:%s\n" \
      "$(basename -s .git "$(git config --get remote.origin.url)")" \
      "$f"
    return
  fi

  f="${f#$gitroot\/}"
  # The $HOME=>~ transformation is useful for when there's a symlink
  # in ~ to another directory within a git repo.  It's a bit of a
  # compromise, to avoid expanding all symlinks using abspath.
  g="${f#$HOME/}"
  if [ "$f" != "$g" ]
  then
    f="~/$g"
  fi
  # return formatted as repo name and position within repo
  printf "%s:%s\n" \
    "$(cd "$gitroot" && basename -s .git "$(git config --get remote.origin.url)")" \
    "$f"
}

unalias d 2>/dev/null
function d ()
{ # like `dirs -v` but with with edits to add context and usually shorten
  local head="$1" ; shift
  if [ -z "$head" ] ; then head=9 ; fi
  local i=0 n
  local orig
  local f g
  echo
  while read f
  do
    orig="$f"

    n="$i"
    i=$(( i + 1 ))
    if [ $n -gt $head ]
    then
      continue
    fi

    # home directory is a special case
    if [ "$f" = '~' ] || [ "$f" = "$HOME" ]
    then
      printf "%2d  %s\n" $n '~'
      continue
    fi

    if ! [ -e "$f" ]
    then
      f="~/${f#$HOME/}"
      printf "%2d  DNE: %s\n" $n "$f"
      continue
    fi

    # add git context if applicable
    if g="$(d_git "$f")"
    then
      printf "%2d  %s\n" $n "$g"
      continue
    fi

    # otherwise pass it through unchanged
    printf "%2d  %s\n" $n "~/${orig#$HOME/}"
    continue

  done <<<"$(dirs -l -p)"

  if [ $n -gt $head ]
  then
    printf "...\n"
    printf "%2d  ?\n" $n
  fi
  echo
}

function pd ()
{ # like builtin pushd, but smarter
  if [ $# -eq 0 ]
  then
    builtin pushd >/dev/null || return
    d
    return
  fi
  # pushes onto stack in reverse order so that the first argument will be on top of the stack
  local i d
  for ((i=$#;i>0;i--))
  do
    d="${!i}"
    if [ -z "$d" ]
    then
      # treat '' as lack of an argument instead of just complaining
      builtin pushd >/dev/null || return
    elif [ "$(dirs -p)" = '~' ]
    then
      builtin cd "$d" >/dev/null || return
    else
      builtin pushd "$d" >/dev/null || return
    fi
  done
  d
}
function pd- () { pd -1 "$@" ; }

for f in `seq 1 9`
do
  eval "function +$f { pd '+$f' \"\$@\" ; }"
  eval "function  $f { +$f \"\$@\" ; }"
  eval "function -$f { pd '-$f' \"\$@\" ; }"
done
function 0 { pd ; "$@" ; }
function +0 { pd ; "$@" ; }
function -0 { pd ; "$@" ; }

# DIRS is a shell+perl script that factors out common strings to reduce display complexity
alias diirs='DIRS'  # or 'dirs -v' in a pinch
alias dirss='DIRS'  # or 'dirs -v' in a pinch
alias diirs='dirs -v'
alias dirss='dirs -v'
unalias diirs
unalias dirss

function PUSHD ()
{
  pd "$@"
}

function popd ()
{
  builtin popd "$@" >/dev/null
  local R=$?
  d
  return $R
}

function POPD ()
{
  popd "$@"
}

function UP ()
{
  local n=1
  if [ -n "$1" ]
  then
    n="$1" ; shift
  fi
  PUSHD +$n
}

function DOWN ()
{
  local n=1
  if [ -n "$1" ]
  then
    n="$1" ; shift
  fi
  n=$(( n - 1 ))
  PUSHD -$n
}
alias Down=DOWN
