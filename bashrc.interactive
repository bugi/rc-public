#!bash
# vim:set ft=sh tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent copyindent :

# The bashrc.other_rc_directories file in this directory
# should do something like this:
#   OTHER_RC_DIRS+=( "$HOME/.rc-private" )

OTHER_RC_DIRS=()
. "$this_bashdir"/bashrc.other_rc_directories


# RC_public="$HOME/.rc-public"
RC_public="$this_bashdir"
bash_RC_public="$RC_public/bashrc.d"
RC_private="$HOME/.rc-private"
bash_RC_private="$RC_private/bashrc.d"
# or derive from this you must have it relocatable:
#  "$(readlink -f "${BASH_SOURCE[0]}" )"
# echo "${BASH_SOURCE[0]}"
# echo == "$(readlink -f "${BASH_SOURCE[0]}" )"
# echo == "$(abspath "${BASH_SOURCE[0]}" )"





# read all files in bashrc.d/ that don't end in .README
declare bashdotd_filenames=()
mapfile -d $'\0' bashdotd_filenames < <( find "${bash_RC_public}/" -maxdepth 1 -type f ! -name \*.sw? ! -name \*.README -print0 | LC_ALL=C sort -z )
for bashdotd_filename in "${bashdotd_filenames[@]}"
do
  if [ -r "$bashdotd_filename" ] ; then . "$bashdotd_filename" ; fi
done
unset bashdotd_filename bashdotd_filenames



# enable this after ferreting out all the RC_private and bash_RC_private references
for other_rc_dir in "${OTHER_RC_DIRS[@]}"
do
  other_rc_dir_abs="$(abspath "$other_rc_dir/bashrc" )"
  if [ -r "${other_rc_dir_abs}/bashrc" ]
  then
    : # . "${other_rc_dir_abs}/bashrc"
  fi
done

# remove these after ferreting out all the other RC_private and bash_RC_private references
. "$bash_RC_private"/keys
. "$bash_RC_private"/jobs
. "$bash_RC_private"/kubectl
. "$bash_RC_private"/brew
. "$bash_RC_private"/supercd

