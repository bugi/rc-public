#!bash
# vim:set ft=sh tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent copyindent :

# The bashrc.other_rc_directories file in this directory
# could say something like this:
#   OTHER_RC_DIRS+=( "$HOME/.rc-private" )
# Better yet though, create symlinks in
# bashrc.other_rc_directories.d/.

OTHER_RC_DIRS=()
. "$this_bashdir"/bashrc.other_rc_directories


RC_public="$this_bashdir"
bash_RC_public="$RC_public/bashrc.d"





# read all files in bashrc.d/ that don't end in .README
declare bashdotd_filenames=()
mapfile -d $'\0' bashdotd_filenames < <( find "${bash_RC_public}/" -maxdepth 1 -type f ! -name \*.sw? ! -name \*.README -print0 | LC_ALL=C sort -z )
for bashdotd_filename in "${bashdotd_filenames[@]}"
do
  if [ -r "$bashdotd_filename" ] ; then . "$bashdotd_filename" ; fi
done
unset bashdotd_filename bashdotd_filenames


# Append to OTHER_RC_DIRS any symlinked directories found in bashrc.other_rc_directories.d.
declare other_rc_dirs=()
mapfile -d $'\0' other_rc_dirs < <( find "${this_bashdir}"/bashrc.other_rc_directories.d/ -type l -print0 | LC_ALL=C sort -z )
for other_rc_dir in "${other_rc_dirs[@]}"
do
  if [ -d "$other_rc_dir" ]
  then
    OTHER_RC_DIRS+=( "$other_rc_dir" )
  fi
done
unset other_rc_dirs

# Call any bashrc.interactive files from OTHER_RC_DIRS.
declare -A rcdir_used # used to avoid calling a file more than once
rcdir_used["$(abspath "${BASH_SOURCE[0]}")"]=1
for other_rc_dir in "${OTHER_RC_DIRS[@]}"
do
  other_rc_dir_abs="$(abspath "$other_rc_dir/bashrc.interactive" )"
  # echo "candidate($other_rc_dir_abs)" 1>&2
  if [ -n "${rcdir_used[$other_rc_dir_abs]}" ]
  then
    # echo "  duplicate" 1>&2
    continue
  fi
  rcdir_used[$other_rc_dir_abs]=1
  if [ -r "${other_rc_dir_abs}" ]
  then
    # echo "  reading" 1>&2
    . "${other_rc_dir_abs}"
  else
    :
    # echo "  unreadable" 1>&2
  fi
done
unset rcdir_used

